{"version":3,"sources":["AddTodo.js","TodoList.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","state","value","changeContent","bind","add","e","this","setState","target","props","createTodo","className","type","onChange","placeholder","onClick","Component","TodoList","todos","completeTodo","deleteTodo","map","todo","key","id","completed","content","API_URL","App","axios","get","then","response","data","post","filter","concat","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"iTAsCeA,E,YAnCb,aAAe,IAAD,8BACZ,+CAEKC,MAAQ,CACXC,MAAO,IAGT,EAAKC,cAAgB,EAAKA,cAAcC,KAAnB,gBACrB,EAAKC,IAAM,EAAKA,IAAID,KAAT,gBARC,E,2EAWAE,GACZC,KAAKC,SAAS,CAAEN,MAAOI,EAAEG,OAAOP,U,4BAIhCK,KAAKG,MAAMC,WAAWJ,KAAKN,MAAMC,OAEjCK,KAAKC,SAAS,CAAEN,MAAO,O,+BAGf,IAAD,OACP,OACE,yBAAKU,UAAU,eACb,2BAAOC,KAAK,OACVX,MAAOK,KAAKN,MAAMC,MAClBY,SAAU,SAACR,GAAD,OAAO,EAAKH,cAAcG,IACpCS,YAAY,sBAEd,4BAAQC,QAAST,KAAKF,KAAtB,a,GA9BcY,aCAP,SAASC,EAAT,GAAsD,IAAnCC,EAAkC,EAAlCA,MAAOC,EAA2B,EAA3BA,aAAcC,EAAa,EAAbA,WACrD,OACE,4BAEIF,EAAMG,KAAI,SAACC,GAAD,OACR,wBAAIC,IAAKD,EAAKE,KACVF,EAAKG,UAAY,gCAASH,EAAKI,SAAoBJ,EAAKI,QAC1D,yBAAKf,UAAU,cACb,4BAAQA,UAAU,WAAWI,QAAS,kBAAMI,EAAaG,EAAKE,OAAOF,EAAKG,UAAY,SAAW,YACjG,4BAAQd,UAAU,SAASI,QAAS,kBAAMK,EAAWE,EAAKE,MAA1D,gB,UCJRG,EAAU,8BAyEDC,E,YAtEb,aAAe,IAAD,8BACZ,+CAEK5B,MAAQ,CACXkB,MAAO,IAGT,EAAKC,aAAe,EAAKA,aAAahB,KAAlB,gBACpB,EAAKiB,WAAa,EAAKA,WAAWjB,KAAhB,gBAClB,EAAKO,WAAa,EAAKA,WAAWP,KAAhB,gBATN,E,iFAYO,IAAD,OAClB0B,IAAMC,IAAIH,GACTI,MAAK,SAAAC,GACJ,EAAKzB,SAAS,CACZW,MAAOc,EAASC,KAAKf,a,iCAKhBM,GAAK,IAAD,OACbK,IAAMK,KAAN,UAAcP,EAAd,WAAgC,CAACH,OAChCO,MAAK,WACJ,IAAMb,EAAQ,EAAKlB,MAAMkB,MAAMiB,QAAO,SAAAb,GAAI,OAAIA,EAAKE,KAAOA,KAE1D,EAAKjB,SAAS,CAACW,e,mCAINM,GAAK,IAAD,OACfK,IAAMK,KAAN,UAAcP,EAAd,aAAkC,CAACH,OAClCO,MAAK,WACJ,IAAMb,EAAQ,EAAKlB,MAAMkB,MAAMG,KAAI,SAAAC,GAKjC,OAJIA,EAAKE,KAAOA,IACdF,EAAKG,WAAaH,EAAKG,WAGlBH,KAGT,EAAKf,SAAS,CAACW,e,iCAIRQ,GAAU,IAAD,OACZJ,EAAO,CAACI,WAEdG,IAAMK,KAAKP,EAASL,GACnBS,MAAK,SAACC,GACL,IAAMd,EAAQ,EAAKlB,MAAMkB,MAAMkB,OAAO,CAACJ,EAASC,KAAKX,OAErD,EAAKf,SAAS,CAACW,e,+BAKjB,OACE,yBAAKP,UAAU,OACb,kBAAC,EAAD,CAASD,WAAYJ,KAAKI,aAE1B,kBAACO,EAAD,CAAUC,MAAOZ,KAAKN,MAAMkB,MAC1BC,aAAcb,KAAKa,aACnBC,WAAYd,KAAKc,kB,GAhETJ,aCGEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBjB,MAAK,SAAAkB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b45351f0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\nclass AddTodo extends Component {\r\n  constructor() {\r\n    super();\r\n\r\n    this.state = {\r\n      value: ''\r\n    }\r\n\r\n    this.changeContent = this.changeContent.bind(this)\r\n    this.add = this.add.bind(this)\r\n  }\r\n\r\n  changeContent(e) {\r\n    this.setState({ value: e.target.value })\r\n  }\r\n\r\n  add() {\r\n    this.props.createTodo(this.state.value)\r\n    \r\n    this.setState({ value: '' })\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"create-todo\">\r\n        <input type=\"text\"\r\n          value={this.state.value}\r\n          onChange={(e) => this.changeContent(e)}\r\n          placeholder=\"What should I do?\"\r\n        />\r\n        <button onClick={this.add}>Save</button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default AddTodo","import React from 'react'\r\n\r\nexport default function TodoList({todos, completeTodo, deleteTodo}) {\r\n  return (\r\n    <ul>\r\n      {\r\n        todos.map((todo) => (\r\n          <li key={todo.id}>\r\n            {+todo.completed ? <strike>{todo.content}</strike> : todo.content}\r\n            <div className=\"btn-groups\">\r\n              <button className=\"complete\" onClick={() => completeTodo(todo.id)}>{+todo.completed ? 'Rework' : 'Complete'}</button>\r\n              <button className=\"delete\" onClick={() => deleteTodo(todo.id)}>Delete</button>\r\n            </div>\r\n          </li>\r\n        ))\r\n      }\r\n    </ul>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\nimport axios from \"axios\";\nimport AddTodo from './AddTodo'\nimport TodoList from './TodoList'\nimport './App.css';\n\n\nconst API_URL = 'http://localhost:8000/todos'\n\nclass App extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      todos: []\n    }\n\n    this.completeTodo = this.completeTodo.bind(this)\n    this.deleteTodo = this.deleteTodo.bind(this)\n    this.createTodo = this.createTodo.bind(this)\n  }\n\n  componentDidMount() {\n    axios.get(API_URL)\n    .then(response => {\n      this.setState({\n        todos: response.data.todos\n      })\n    })\n  }\n\n  deleteTodo(id) {\n    axios.post(`${API_URL}/delete`, {id})\n    .then(() => {\n      const todos = this.state.todos.filter(todo => todo.id !== id)\n\n      this.setState({todos})\n    })\n  }\n\n  completeTodo(id) {\n    axios.post(`${API_URL}/complete`, {id})\n    .then(() => {\n      const todos = this.state.todos.map(todo => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed\n        }\n\n        return todo\n      })\n\n      this.setState({todos})\n    })\n  }\n\n  createTodo(content) {\n    const todo = {content}\n\n    axios.post(API_URL, todo)\n    .then((response) => {\n      const todos = this.state.todos.concat([response.data.todo])\n      \n      this.setState({todos})\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <AddTodo createTodo={this.createTodo}/>\n        \n        <TodoList todos={this.state.todos}\n          completeTodo={this.completeTodo}\n          deleteTodo={this.deleteTodo}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}